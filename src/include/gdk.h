extern GType gdk_device_get_type (void);
extern const gchar * gdk_device_get_name (GdkDevice *device);
extern gboolean gdk_device_get_has_cursor (GdkDevice *device);
extern GdkInputSource gdk_device_get_source (GdkDevice *device);
extern GdkInputMode gdk_device_get_mode (GdkDevice *device);
extern gboolean gdk_device_set_mode (GdkDevice *device,GdkInputMode mode);
extern gint gdk_device_get_n_keys (GdkDevice *device);
extern gboolean gdk_device_get_key (GdkDevice *device,guint index_,guint *keyval,GdkModifierType *modifiers);
extern void gdk_device_set_key (GdkDevice *device,guint index_,guint keyval,GdkModifierType modifiers);
extern GdkAxisUse gdk_device_get_axis_use (GdkDevice *device,guint index_);
extern void gdk_device_set_axis_use (GdkDevice *device,guint index_,GdkAxisUse use);
extern void gdk_device_get_state (GdkDevice *device,GdkWindow *window,gdouble *axes,GdkModifierType *mask);
extern void gdk_device_get_position (GdkDevice *device,GdkScreen **screen,gint *x,gint *y);
extern GdkWindow *gdk_device_get_window_at_position(GdkDevice *device,gint *win_x,gint *win_y);
extern void gdk_device_get_position_double (GdkDevice *device,GdkScreen **screen,gdouble *x,gdouble *y);
extern GdkWindow *gdk_device_get_window_at_position_double(GdkDevice *device,gdouble *win_x,gdouble *win_y);
extern gboolean gdk_device_get_history (GdkDevice *device,GdkWindow *window,guint32 start,guint32 stop,GdkTimeCoord ***events,gint *n_events);
extern void gdk_device_free_history (GdkTimeCoord **events,gint n_events);
extern gint gdk_device_get_n_axes (GdkDevice *device);
extern GList * gdk_device_list_axes (GdkDevice *device);
extern gboolean gdk_device_get_axis_value (GdkDevice *device,gdouble *axes,GdkAtom axis_label,gdouble *value);
extern gboolean gdk_device_get_axis (GdkDevice *device,gdouble *axes,GdkAxisUse use,gdouble *value);
extern GdkDisplay * gdk_device_get_display (GdkDevice *device);
extern GdkDevice * gdk_device_get_associated_device (GdkDevice *device);
extern GList * gdk_device_list_slave_devices (GdkDevice *device);
extern GdkDeviceType gdk_device_get_device_type (GdkDevice *device);
extern GdkGrabStatus gdk_device_grab (GdkDevice *device,GdkWindow *window,GdkGrabOwnership grab_ownership,gboolean owner_events,GdkEventMask event_mask,GdkCursor *cursor,guint32 time_);
extern void gdk_device_ungrab (GdkDevice *device,guint32 time_);
extern void gdk_device_warp (GdkDevice *device,GdkScreen *screen,gint x,gint y);
extern gboolean gdk_device_grab_info_libgtk_only (GdkDisplay *display,GdkDevice *device,GdkWindow **grab_window,gboolean *owner_events);
extern GdkWindow *gdk_device_get_last_event_window (GdkDevice *device);
extern const gchar *gdk_device_get_vendor_id (GdkDevice *device);
extern const gchar *gdk_device_get_product_id (GdkDevice *device);
extern GdkSeat *gdk_device_get_seat (GdkDevice *device);
extern GdkAxisFlags gdk_device_get_axes (GdkDevice *device);
extern GType gdk_drag_context_get_type (void);
extern void gdk_drag_context_set_device (GdkDragContext *context,GdkDevice *device);
extern GdkDevice * gdk_drag_context_get_device (GdkDragContext *context);
extern GList *gdk_drag_context_list_targets (GdkDragContext *context);
extern GdkDragAction gdk_drag_context_get_actions (GdkDragContext *context);
extern GdkDragAction gdk_drag_context_get_suggested_action (GdkDragContext *context);
extern GdkDragAction gdk_drag_context_get_selected_action (GdkDragContext *context);
extern GdkWindow *gdk_drag_context_get_source_window (GdkDragContext *context);
extern GdkWindow *gdk_drag_context_get_dest_window (GdkDragContext *context);
extern GdkDragProtocol gdk_drag_context_get_protocol (GdkDragContext *context);
extern void gdk_drag_status (GdkDragContext *context,GdkDragAction action,guint32 time_);
extern void gdk_drop_reply (GdkDragContext *context,gboolean accepted,guint32 time_);
extern void gdk_drop_finish (GdkDragContext *context,gboolean success,guint32 time_);
extern GdkAtom gdk_drag_get_selection (GdkDragContext *context);
extern GdkDragContext * gdk_drag_begin (GdkWindow *window,GList *targets);
extern GdkDragContext * gdk_drag_begin_for_device (GdkWindow *window,GdkDevice *device,GList *targets);
extern GdkDragContext * gdk_drag_begin_from_point (GdkWindow *window,GdkDevice *device,GList *targets,gint x_root,gint y_root);
extern void gdk_drag_find_window_for_screen (GdkDragContext *context,GdkWindow *drag_window,GdkScreen *screen,gint x_root,gint y_root,GdkWindow **dest_window,GdkDragProtocol *protocol);
extern gboolean gdk_drag_motion (GdkDragContext *context,GdkWindow *dest_window,GdkDragProtocol protocol,gint x_root,gint y_root,GdkDragAction suggested_action,GdkDragAction possible_actions,guint32 time_);
extern void gdk_drag_drop (GdkDragContext *context,guint32 time_);
extern void gdk_drag_abort (GdkDragContext *context,guint32 time_);
extern gboolean gdk_drag_drop_succeeded (GdkDragContext *context);
extern void gdk_drag_drop_done (GdkDragContext *context,gboolean success);
extern GdkWindow *gdk_drag_context_get_drag_window (GdkDragContext *context);
extern void gdk_drag_context_set_hotspot (GdkDragContext *context,gint hot_x,gint hot_y);
extern gboolean gdk_drag_context_manage_dnd (GdkDragContext *context,GdkWindow *ipc_window,GdkDragAction actions);
extern GType gdk_device_tool_get_type (void);
extern guint64 gdk_device_tool_get_serial (GdkDeviceTool *tool);
extern guint64 gdk_device_tool_get_hardware_id (GdkDeviceTool *tool);
extern GdkDeviceToolType gdk_device_tool_get_tool_type (GdkDeviceTool *tool);
extern GType gdk_event_get_type (void);
extern GType gdk_event_sequence_get_type (void);
extern gboolean gdk_events_pending (void);
extern GdkEvent* gdk_event_get (void);
extern GdkEvent* gdk_event_peek (void);
extern void gdk_event_put (const GdkEvent *event);
extern GdkEvent* gdk_event_new (GdkEventType type);
extern GdkEvent* gdk_event_copy (const GdkEvent *event);
extern void gdk_event_free (GdkEvent *event);
extern GdkWindow *gdk_event_get_window (const GdkEvent *event);
extern guint32 gdk_event_get_time (const GdkEvent *event);
extern gboolean gdk_event_get_state (const GdkEvent *event,GdkModifierType *state);
extern gboolean gdk_event_get_coords (const GdkEvent *event,gdouble *x_win,gdouble *y_win);
extern gboolean gdk_event_get_root_coords (const GdkEvent *event,gdouble *x_root,gdouble *y_root);
extern gboolean gdk_event_get_button (const GdkEvent *event,guint *button);
extern gboolean gdk_event_get_click_count (const GdkEvent *event,guint *click_count);
extern gboolean gdk_event_get_keyval (const GdkEvent *event,guint *keyval);
extern gboolean gdk_event_get_keycode (const GdkEvent *event,guint16 *keycode);
extern gboolean gdk_event_get_scroll_direction (const GdkEvent *event,GdkScrollDirection *direction);
extern gboolean gdk_event_get_scroll_deltas (const GdkEvent *event,gdouble *delta_x,gdouble *delta_y);
extern gboolean gdk_event_is_scroll_stop_event (const GdkEvent *event);
extern gboolean gdk_event_get_axis (const GdkEvent *event,GdkAxisUse axis_use,gdouble *value);
extern void gdk_event_set_device (GdkEvent *event,GdkDevice *device);
extern GdkDevice* gdk_event_get_device (const GdkEvent *event);
extern void gdk_event_set_source_device (GdkEvent *event,GdkDevice *device);
extern GdkDevice* gdk_event_get_source_device (const GdkEvent *event);
extern void gdk_event_request_motions (const GdkEventMotion *event);
extern gboolean gdk_event_triggers_context_menu (const GdkEvent *event);
extern gboolean gdk_events_get_distance (GdkEvent *event1,GdkEvent *event2,gdouble *distance);
extern gboolean gdk_events_get_angle (GdkEvent *event1,GdkEvent *event2,gdouble *angle);
extern gboolean gdk_events_get_center (GdkEvent *event1,GdkEvent *event2,gdouble *x,gdouble *y);
extern void gdk_event_handler_set (GdkEventFunc func,gpointer data,GDestroyNotify notify);
extern void gdk_event_set_screen (GdkEvent *event,GdkScreen *screen);
extern GdkScreen *gdk_event_get_screen (const GdkEvent *event);
extern GdkEventSequence *gdk_event_get_event_sequence (const GdkEvent *event);
extern GdkEventType gdk_event_get_event_type (const GdkEvent *event);
extern GdkSeat *gdk_event_get_seat (const GdkEvent *event);
extern void gdk_set_show_events (gboolean show_events);
extern gboolean gdk_get_show_events (void);
extern gboolean gdk_setting_get (const gchar *name,GValue *value);
extern GdkDeviceTool *gdk_event_get_device_tool (const GdkEvent *event);
extern void gdk_event_set_device_tool (GdkEvent *event,GdkDeviceTool *tool);
extern int gdk_event_get_scancode (GdkEvent *event);
extern gboolean gdk_event_get_pointer_emulated (GdkEvent *event);
extern GType gdk_device_manager_get_type (void);
extern GdkDisplay * gdk_device_manager_get_display (GdkDeviceManager *device_manager);
extern GList * gdk_device_manager_list_devices (GdkDeviceManager *device_manager,GdkDeviceType type);
extern GdkDevice * gdk_device_manager_get_client_pointer (GdkDeviceManager *device_manager);
extern GType gdk_drawing_context_get_type (void);
extern GdkWindow * gdk_drawing_context_get_window (GdkDrawingContext *context);
extern cairo_region_t *gdk_drawing_context_get_clip (GdkDrawingContext *context);
extern gboolean gdk_drawing_context_is_valid (GdkDrawingContext *context);
extern cairo_t * gdk_drawing_context_get_cairo_context (GdkDrawingContext *context);
extern GType gdk_frame_timings_get_type (void);
extern GdkFrameTimings *gdk_frame_timings_ref (GdkFrameTimings *timings);
extern void gdk_frame_timings_unref (GdkFrameTimings *timings);
extern gint64 gdk_frame_timings_get_frame_counter (GdkFrameTimings *timings);
extern gboolean gdk_frame_timings_get_complete (GdkFrameTimings *timings);
extern gint64 gdk_frame_timings_get_frame_time (GdkFrameTimings *timings);
extern gint64 gdk_frame_timings_get_presentation_time (GdkFrameTimings *timings);
extern gint64 gdk_frame_timings_get_refresh_interval (GdkFrameTimings *timings);
extern gint64 gdk_frame_timings_get_predicted_presentation_time (GdkFrameTimings *timings);
extern GType gdk_frame_clock_get_type (void);
extern gint64 gdk_frame_clock_get_frame_time (GdkFrameClock *frame_clock);
extern void gdk_frame_clock_request_phase (GdkFrameClock *frame_clock,GdkFrameClockPhase phase);
extern void gdk_frame_clock_begin_updating (GdkFrameClock *frame_clock);
extern void gdk_frame_clock_end_updating (GdkFrameClock *frame_clock);
extern gint64 gdk_frame_clock_get_frame_counter (GdkFrameClock *frame_clock);
extern gint64 gdk_frame_clock_get_history_start (GdkFrameClock *frame_clock);
extern GdkFrameTimings *gdk_frame_clock_get_timings (GdkFrameClock *frame_clock,gint64 frame_counter);
extern GdkFrameTimings *gdk_frame_clock_get_current_timings (GdkFrameClock *frame_clock);
extern void gdk_frame_clock_get_refresh_info (GdkFrameClock *frame_clock,gint64 base_time,gint64 *refresh_interval_return,gint64 *presentation_time_return);
extern GType gdk_window_get_type (void);
extern GdkWindow* gdk_window_new (GdkWindow *parent,GdkWindowAttr *attributes,gint attributes_mask);
extern void gdk_window_destroy (GdkWindow *window);
extern GdkWindowType gdk_window_get_window_type (GdkWindow *window);
extern gboolean gdk_window_is_destroyed (GdkWindow *window);
extern GdkVisual * gdk_window_get_visual (GdkWindow *window);
extern GdkScreen * gdk_window_get_screen (GdkWindow *window);
extern GdkDisplay * gdk_window_get_display (GdkWindow *window);
extern GdkWindow* gdk_window_at_pointer (gint *win_x,gint *win_y);
extern void gdk_window_show (GdkWindow *window);
extern void gdk_window_hide (GdkWindow *window);
extern void gdk_window_withdraw (GdkWindow *window);
extern void gdk_window_show_unraised (GdkWindow *window);
extern void gdk_window_move (GdkWindow *window,gint x,gint y);
extern void gdk_window_resize (GdkWindow *window,gint width,gint height);
extern void gdk_window_move_resize (GdkWindow *window,gint x,gint y,gint width,gint height);
extern void gdk_window_move_to_rect (GdkWindow *window,const GdkRectangle *rect,GdkGravity rect_anchor,GdkGravity window_anchor,GdkAnchorHints anchor_hints,gint rect_anchor_dx,gint rect_anchor_dy);
extern void gdk_window_reparent (GdkWindow *window,GdkWindow *new_parent,gint x,gint y);
extern void gdk_window_raise (GdkWindow *window);
extern void gdk_window_lower (GdkWindow *window);
extern void gdk_window_restack (GdkWindow *window,GdkWindow *sibling,gboolean above);
extern void gdk_window_focus (GdkWindow *window,guint32 timestamp);
extern void gdk_window_set_user_data (GdkWindow *window,gpointer user_data);
extern void gdk_window_set_override_redirect (GdkWindow *window,gboolean override_redirect);
extern gboolean gdk_window_get_accept_focus (GdkWindow *window);
extern void gdk_window_set_accept_focus (GdkWindow *window,gboolean accept_focus);
extern gboolean gdk_window_get_focus_on_map (GdkWindow *window);
extern void gdk_window_set_focus_on_map (GdkWindow *window,gboolean focus_on_map);
extern void gdk_window_add_filter (GdkWindow *window,GdkFilterFunc function,gpointer data);
extern void gdk_window_remove_filter (GdkWindow *window,GdkFilterFunc function,gpointer data);
extern void gdk_window_scroll (GdkWindow *window,gint dx,gint dy);
extern void gdk_window_move_region (GdkWindow *window,const cairo_region_t *region,gint dx,gint dy);
extern gboolean gdk_window_ensure_native (GdkWindow *window);
extern void gdk_window_shape_combine_region (GdkWindow *window,const cairo_region_t *shape_region,gint offset_x,gint offset_y);
extern void gdk_window_set_child_shapes (GdkWindow *window);
extern gboolean gdk_window_get_composited (GdkWindow *window);
extern void gdk_window_set_composited (GdkWindow *window,gboolean composited);
extern void gdk_window_merge_child_shapes (GdkWindow *window);
extern void gdk_window_input_shape_combine_region (GdkWindow *window,const cairo_region_t *shape_region,gint offset_x,gint offset_y);
extern void gdk_window_set_child_input_shapes (GdkWindow *window);
extern void gdk_window_merge_child_input_shapes (GdkWindow *window);
extern void gdk_window_set_pass_through (GdkWindow *window,gboolean pass_through);
extern gboolean gdk_window_get_pass_through (GdkWindow *window);
extern gboolean gdk_window_is_visible (GdkWindow *window);
extern gboolean gdk_window_is_viewable (GdkWindow *window);
extern gboolean gdk_window_is_input_only (GdkWindow *window);
extern gboolean gdk_window_is_shaped (GdkWindow *window);
extern GdkWindowState gdk_window_get_state (GdkWindow *window);
extern gboolean gdk_window_set_static_gravities (GdkWindow *window,gboolean use_static);
extern void gdk_window_set_invalidate_handler (GdkWindow *window,GdkWindowInvalidateHandlerFunc handler);
extern gboolean gdk_window_has_native (GdkWindow *window);
extern void gdk_window_set_type_hint (GdkWindow *window,GdkWindowTypeHint hint);
extern GdkWindowTypeHint gdk_window_get_type_hint (GdkWindow *window);
extern gboolean gdk_window_get_modal_hint (GdkWindow *window);
extern void gdk_window_set_modal_hint (GdkWindow *window,gboolean modal);
extern void gdk_window_set_skip_taskbar_hint (GdkWindow *window,gboolean skips_taskbar);
extern void gdk_window_set_skip_pager_hint (GdkWindow *window,gboolean skips_pager);
extern void gdk_window_set_urgency_hint (GdkWindow *window,gboolean urgent);
extern void gdk_window_set_geometry_hints (GdkWindow *window,const GdkGeometry *geometry,GdkWindowHints geom_mask);
extern cairo_region_t *gdk_window_get_clip_region (GdkWindow *window);
extern cairo_region_t *gdk_window_get_visible_region(GdkWindow *window);
extern void gdk_window_begin_paint_rect (GdkWindow *window,const GdkRectangle *rectangle);
extern void gdk_window_mark_paint_from_clip (GdkWindow *window,cairo_t *cr);
extern void gdk_window_begin_paint_region (GdkWindow *window,const cairo_region_t *region);
extern void gdk_window_end_paint (GdkWindow *window);
extern GdkDrawingContext *gdk_window_begin_draw_frame (GdkWindow *window,const cairo_region_t *region);
extern void gdk_window_end_draw_frame (GdkWindow *window,GdkDrawingContext *context);
extern void gdk_window_flush (GdkWindow *window);
extern void gdk_window_set_title (GdkWindow *window,const gchar *title);
extern void gdk_window_set_role (GdkWindow *window,const gchar *role);
extern void gdk_window_set_startup_id (GdkWindow *window,const gchar *startup_id);
extern void gdk_window_set_transient_for (GdkWindow *window,GdkWindow *parent);
extern void gdk_window_set_background (GdkWindow *window,const GdkColor *color);
extern void gdk_window_set_background_rgba (GdkWindow *window,const GdkRGBA *rgba);
extern void gdk_window_set_background_pattern (GdkWindow *window,cairo_pattern_t *pattern);
extern cairo_pattern_t *gdk_window_get_background_pattern (GdkWindow *window);
extern void gdk_window_set_cursor (GdkWindow *window,GdkCursor *cursor);
extern GdkCursor *gdk_window_get_cursor (GdkWindow *window);
extern void gdk_window_set_device_cursor (GdkWindow *window,GdkDevice *device,GdkCursor *cursor);
extern GdkCursor *gdk_window_get_device_cursor (GdkWindow *window,GdkDevice *device);
extern void gdk_window_get_user_data (GdkWindow *window,gpointer *data);
extern void gdk_window_get_geometry (GdkWindow *window,gint *x,gint *y,gint *width,gint *height);
extern int gdk_window_get_width (GdkWindow *window);
extern int gdk_window_get_height (GdkWindow *window);
extern void gdk_window_get_position (GdkWindow *window,gint *x,gint *y);
extern gint gdk_window_get_origin (GdkWindow *window,gint *x,gint *y);
extern void gdk_window_get_root_coords (GdkWindow *window,gint x,gint y,gint *root_x,gint *root_y);
extern void gdk_window_coords_to_parent (GdkWindow *window,gdouble x,gdouble y,gdouble *parent_x,gdouble *parent_y);
extern void gdk_window_coords_from_parent (GdkWindow *window,gdouble parent_x,gdouble parent_y,gdouble *x,gdouble *y);
extern void gdk_window_get_root_origin (GdkWindow *window,gint *x,gint *y);
extern void gdk_window_get_frame_extents (GdkWindow *window,GdkRectangle *rect);
extern gint gdk_window_get_scale_factor (GdkWindow *window);
extern GdkWindow * gdk_window_get_pointer (GdkWindow *window,gint *x,gint *y,GdkModifierType *mask);
extern GdkWindow * gdk_window_get_device_position (GdkWindow *window,GdkDevice *device,gint *x,gint *y,GdkModifierType *mask);
extern GdkWindow * gdk_window_get_device_position_double (GdkWindow *window,GdkDevice *device,gdouble *x,gdouble *y,GdkModifierType *mask);
extern GdkWindow * gdk_window_get_parent (GdkWindow *window);
extern GdkWindow * gdk_window_get_toplevel (GdkWindow *window);
extern GdkWindow * gdk_window_get_effective_parent (GdkWindow *window);
extern GdkWindow * gdk_window_get_effective_toplevel (GdkWindow *window);
extern GList * gdk_window_get_children (GdkWindow *window);
extern GList * gdk_window_peek_children (GdkWindow *window);
extern GList * gdk_window_get_children_with_user_data (GdkWindow *window,gpointer user_data);
extern GdkEventMask gdk_window_get_events (GdkWindow *window);
extern void gdk_window_set_events (GdkWindow *window,GdkEventMask event_mask);
extern void gdk_window_set_device_events (GdkWindow *window,GdkDevice *device,GdkEventMask event_mask);
extern GdkEventMask gdk_window_get_device_events (GdkWindow *window,GdkDevice *device);
extern void gdk_window_set_source_events (GdkWindow *window,GdkInputSource source,GdkEventMask event_mask);
extern GdkEventMask gdk_window_get_source_events (GdkWindow *window,GdkInputSource source);
extern void gdk_window_set_icon_list (GdkWindow *window,GList *pixbufs);
extern void gdk_window_set_icon_name (GdkWindow *window,const gchar *name);
extern void gdk_window_set_group (GdkWindow *window,GdkWindow *leader);
extern GdkWindow* gdk_window_get_group (GdkWindow *window);
extern void gdk_window_set_decorations (GdkWindow *window,GdkWMDecoration decorations);
extern gboolean gdk_window_get_decorations (GdkWindow *window,GdkWMDecoration *decorations);
extern void gdk_window_set_functions (GdkWindow *window,GdkWMFunction functions);
extern cairo_surface_t *gdk_window_create_similar_surface (GdkWindow *window,cairo_content_t content,int width,int height);
extern cairo_surface_t *gdk_window_create_similar_image_surface (GdkWindow *window,cairo_format_t format,int width,int height,int scale);
extern void gdk_window_beep (GdkWindow *window);
extern void gdk_window_iconify (GdkWindow *window);
extern void gdk_window_deiconify (GdkWindow *window);
extern void gdk_window_stick (GdkWindow *window);
extern void gdk_window_unstick (GdkWindow *window);
extern void gdk_window_maximize (GdkWindow *window);
extern void gdk_window_unmaximize (GdkWindow *window);
extern void gdk_window_fullscreen (GdkWindow *window);
extern void gdk_window_fullscreen_on_monitor (GdkWindow *window,gint monitor);
extern void gdk_window_set_fullscreen_mode (GdkWindow *window,GdkFullscreenMode mode);
extern GdkFullscreenMode gdk_window_get_fullscreen_mode (GdkWindow *window);
extern void gdk_window_unfullscreen (GdkWindow *window);
extern void gdk_window_set_keep_above (GdkWindow *window,gboolean setting);
extern void gdk_window_set_keep_below (GdkWindow *window,gboolean setting);
extern void gdk_window_set_opacity (GdkWindow *window,gdouble opacity);
extern void gdk_window_register_dnd (GdkWindow *window);
extern GdkDragProtocol gdk_window_get_drag_protocol(GdkWindow *window,GdkWindow **target);
extern void gdk_window_begin_resize_drag (GdkWindow *window,GdkWindowEdge edge,gint button,gint root_x,gint root_y,guint32 timestamp);
extern void gdk_window_begin_resize_drag_for_device (GdkWindow *window,GdkWindowEdge edge,GdkDevice *device,gint button,gint root_x,gint root_y,guint32 timestamp);
extern void gdk_window_begin_move_drag (GdkWindow *window,gint button,gint root_x,gint root_y,guint32 timestamp);
extern void gdk_window_begin_move_drag_for_device (GdkWindow *window,GdkDevice *device,gint button,gint root_x,gint root_y,guint32 timestamp);
extern void gdk_window_invalidate_rect (GdkWindow *window,const GdkRectangle *rect,gboolean invalidate_children);
extern void gdk_window_invalidate_region (GdkWindow *window,const cairo_region_t *region,gboolean invalidate_children);
extern void gdk_window_invalidate_maybe_recurse (GdkWindow *window,const cairo_region_t *region,GdkWindowChildFunc child_func,gpointer user_data);
extern cairo_region_t *gdk_window_get_update_area (GdkWindow *window);
extern void gdk_window_freeze_updates (GdkWindow *window);
extern void gdk_window_thaw_updates (GdkWindow *window);
extern void gdk_window_freeze_toplevel_updates_libgtk_only (GdkWindow *window);
extern void gdk_window_thaw_toplevel_updates_libgtk_only (GdkWindow *window);
extern void gdk_window_process_all_updates (void);
extern void gdk_window_process_updates (GdkWindow *window,gboolean update_children);
extern void gdk_window_set_debug_updates (gboolean setting);
extern void gdk_window_constrain_size (GdkGeometry *geometry,GdkWindowHints flags,gint width,gint height,gint *new_width,gint *new_height);
extern void gdk_window_enable_synchronized_configure (GdkWindow *window);
extern void gdk_window_configure_finished (GdkWindow *window);
extern GdkWindow *gdk_get_default_root_window (void);
extern cairo_surface_t *gdk_offscreen_window_get_surface (GdkWindow *window);
extern void gdk_offscreen_window_set_embedder (GdkWindow *window,GdkWindow *embedder);
extern GdkWindow *gdk_offscreen_window_get_embedder (GdkWindow *window);
extern void gdk_window_geometry_changed (GdkWindow *window);
extern void gdk_window_set_support_multidevice (GdkWindow *window,gboolean support_multidevice);
extern gboolean gdk_window_get_support_multidevice (GdkWindow *window);
extern GdkFrameClock* gdk_window_get_frame_clock (GdkWindow *window);
extern void gdk_window_set_opaque_region (GdkWindow *window,cairo_region_t *region);
extern void gdk_window_set_event_compression (GdkWindow *window,gboolean event_compression);
extern gboolean gdk_window_get_event_compression (GdkWindow *window);
extern void gdk_window_set_shadow_width (GdkWindow *window,gint left,gint right,gint top,gint bottom);
extern gboolean gdk_window_show_window_menu (GdkWindow *window,GdkEvent *event);
extern GdkGLContext * gdk_window_create_gl_context (GdkWindow *window,GError **error);
extern GType gdk_seat_get_type (void);
extern GdkGrabStatus gdk_seat_grab (GdkSeat *seat,GdkWindow *window,GdkSeatCapabilities capabilities,gboolean owner_events,GdkCursor *cursor,const GdkEvent *event,GdkSeatGrabPrepareFunc prepare_func,gpointer prepare_func_data);
extern void gdk_seat_ungrab (GdkSeat *seat);
extern GdkDisplay * gdk_seat_get_display (GdkSeat *seat);
extern GdkSeatCapabilities gdk_seat_get_capabilities (GdkSeat *seat);
extern GList * gdk_seat_get_slaves (GdkSeat *seat,GdkSeatCapabilities capabilities);
extern GdkDevice * gdk_seat_get_pointer (GdkSeat *seat);
extern GdkDevice * gdk_seat_get_keyboard (GdkSeat *seat);
extern gboolean gdk_rectangle_intersect (const GdkRectangle *src1,const GdkRectangle *src2,GdkRectangle *dest);
extern void gdk_rectangle_union (const GdkRectangle *src1,const GdkRectangle *src2,GdkRectangle *dest);
extern gboolean gdk_rectangle_equal (const GdkRectangle *rect1,const GdkRectangle *rect2);
extern GType gdk_rectangle_get_type (void);
extern GType gdk_monitor_get_type (void);
extern GdkDisplay * gdk_monitor_get_display (GdkMonitor *monitor);
extern void gdk_monitor_get_geometry (GdkMonitor *monitor,GdkRectangle *geometry);
extern void gdk_monitor_get_workarea (GdkMonitor *monitor,GdkRectangle *workarea);
extern int gdk_monitor_get_width_mm (GdkMonitor *monitor);
extern int gdk_monitor_get_height_mm (GdkMonitor *monitor);
extern const char * gdk_monitor_get_manufacturer (GdkMonitor *monitor);
extern const char * gdk_monitor_get_model (GdkMonitor *monitor);
extern int gdk_monitor_get_scale_factor (GdkMonitor *monitor);
extern int gdk_monitor_get_refresh_rate (GdkMonitor *monitor);
extern GdkSubpixelLayout gdk_monitor_get_subpixel_layout (GdkMonitor *monitor);
extern gboolean gdk_monitor_is_primary (GdkMonitor *monitor);
extern GType gdk_display_get_type (void);
extern GdkDisplay *gdk_display_open (const gchar *display_name);
extern const gchar * gdk_display_get_name (GdkDisplay *display);
extern gint gdk_display_get_n_screens (GdkDisplay *display);
extern GdkScreen * gdk_display_get_screen (GdkDisplay *display,gint screen_num);
extern GdkScreen * gdk_display_get_default_screen (GdkDisplay *display);
extern void gdk_display_pointer_ungrab (GdkDisplay *display,guint32 time_);
extern void gdk_display_keyboard_ungrab (GdkDisplay *display,guint32 time_);
extern gboolean gdk_display_pointer_is_grabbed (GdkDisplay *display);
extern gboolean gdk_display_device_is_grabbed (GdkDisplay *display,GdkDevice *device);
extern void gdk_display_beep (GdkDisplay *display);
extern void gdk_display_sync (GdkDisplay *display);
extern void gdk_display_flush (GdkDisplay *display);
extern void gdk_display_close (GdkDisplay *display);
extern gboolean gdk_display_is_closed (GdkDisplay *display);
extern GList * gdk_display_list_devices (GdkDisplay *display);
extern GdkEvent* gdk_display_get_event (GdkDisplay *display);
extern GdkEvent* gdk_display_peek_event (GdkDisplay *display);
extern void gdk_display_put_event (GdkDisplay *display,const GdkEvent *event);
extern gboolean gdk_display_has_pending (GdkDisplay *display);
extern void gdk_display_set_double_click_time (GdkDisplay *display,guint msec);
extern void gdk_display_set_double_click_distance (GdkDisplay *display,guint distance);
extern GdkDisplay *gdk_display_get_default (void);
extern void gdk_display_get_pointer (GdkDisplay *display,GdkScreen **screen,gint *x,gint *y,GdkModifierType *mask);
extern GdkWindow * gdk_display_get_window_at_pointer (GdkDisplay *display,gint *win_x,gint *win_y);
extern void gdk_display_warp_pointer (GdkDisplay *display,GdkScreen *screen,gint x,gint y);
extern GdkDisplay *gdk_display_open_default_libgtk_only (void);
extern gboolean gdk_display_supports_cursor_alpha (GdkDisplay *display);
extern gboolean gdk_display_supports_cursor_color (GdkDisplay *display);
extern guint gdk_display_get_default_cursor_size (GdkDisplay *display);
extern void gdk_display_get_maximal_cursor_size (GdkDisplay *display,guint *width,guint *height);
extern GdkWindow *gdk_display_get_default_group (GdkDisplay *display);
extern gboolean gdk_display_supports_selection_notification (GdkDisplay *display);
extern gboolean gdk_display_request_selection_notification (GdkDisplay *display,GdkAtom selection);
extern gboolean gdk_display_supports_clipboard_persistence (GdkDisplay *display);
extern void gdk_display_store_clipboard (GdkDisplay *display,GdkWindow *clipboard_window,guint32 time_,const GdkAtom *targets,gint n_targets);
extern gboolean gdk_display_supports_shapes (GdkDisplay *display);
extern gboolean gdk_display_supports_input_shapes (GdkDisplay *display);
extern gboolean gdk_display_supports_composite (GdkDisplay *display);
extern void gdk_display_notify_startup_complete (GdkDisplay *display,const gchar *startup_id);
extern GdkDeviceManager * gdk_display_get_device_manager (GdkDisplay *display);
extern GdkAppLaunchContext *gdk_display_get_app_launch_context (GdkDisplay *display);
extern GdkSeat * gdk_display_get_default_seat (GdkDisplay *display);
extern GList * gdk_display_list_seats (GdkDisplay *display);
extern int gdk_display_get_n_monitors (GdkDisplay *display);
extern GdkMonitor * gdk_display_get_monitor (GdkDisplay *display,int monitor_num);
extern GdkMonitor * gdk_display_get_primary_monitor (GdkDisplay *display);
extern GdkMonitor * gdk_display_get_monitor_at_point (GdkDisplay *display,int x,int y);
extern GdkMonitor * gdk_display_get_monitor_at_window (GdkDisplay *display,GdkWindow *window);
extern GType gdk_screen_get_type (void);
extern GdkVisual * gdk_screen_get_system_visual (GdkScreen *screen);
extern GdkVisual * gdk_screen_get_rgba_visual (GdkScreen *screen);
extern gboolean gdk_screen_is_composited (GdkScreen *screen);
extern GdkWindow * gdk_screen_get_root_window (GdkScreen *screen);
extern GdkDisplay * gdk_screen_get_display (GdkScreen *screen);
extern gint gdk_screen_get_number (GdkScreen *screen);
extern gint gdk_screen_get_width (GdkScreen *screen);
extern gint gdk_screen_get_height (GdkScreen *screen);
extern gint gdk_screen_get_width_mm (GdkScreen *screen);
extern gint gdk_screen_get_height_mm (GdkScreen *screen);
extern GList * gdk_screen_list_visuals (GdkScreen *screen);
extern GList * gdk_screen_get_toplevel_windows (GdkScreen *screen);
extern gchar * gdk_screen_make_display_name (GdkScreen *screen);
extern gint gdk_screen_get_n_monitors (GdkScreen *screen);
extern gint gdk_screen_get_primary_monitor (GdkScreen *screen);
extern void gdk_screen_get_monitor_geometry (GdkScreen *screen,gint monitor_num,GdkRectangle *dest);
extern void gdk_screen_get_monitor_workarea (GdkScreen *screen,gint monitor_num,GdkRectangle *dest);
extern gint gdk_screen_get_monitor_at_point (GdkScreen *screen,gint x,gint y);
extern gint gdk_screen_get_monitor_at_window (GdkScreen *screen,GdkWindow *window);
extern gint gdk_screen_get_monitor_width_mm (GdkScreen *screen,gint monitor_num);
extern gint gdk_screen_get_monitor_height_mm (GdkScreen *screen,gint monitor_num);
extern gchar * gdk_screen_get_monitor_plug_name (GdkScreen *screen,gint monitor_num);
extern gint gdk_screen_get_monitor_scale_factor (GdkScreen *screen,gint monitor_num);
extern GdkScreen *gdk_screen_get_default (void);
extern gboolean gdk_screen_get_setting (GdkScreen *screen,const gchar *name,GValue *value);
extern void gdk_screen_set_font_options (GdkScreen *screen,const cairo_font_options_t *options);
extern const cairo_font_options_t *gdk_screen_get_font_options (GdkScreen *screen);
extern void gdk_screen_set_resolution (GdkScreen *screen,gdouble dpi);
extern gdouble gdk_screen_get_resolution (GdkScreen *screen);
extern GdkWindow *gdk_screen_get_active_window (GdkScreen *screen);
extern GList *gdk_screen_get_window_stack (GdkScreen *screen);
extern GType gdk_app_launch_context_get_type (void);
extern GdkAppLaunchContext *gdk_app_launch_context_new (void);
extern void gdk_app_launch_context_set_display (GdkAppLaunchContext *context,GdkDisplay *display);
extern void gdk_app_launch_context_set_screen (GdkAppLaunchContext *context,GdkScreen *screen);
extern void gdk_app_launch_context_set_desktop (GdkAppLaunchContext *context,gint desktop);
extern void gdk_app_launch_context_set_timestamp (GdkAppLaunchContext *context,guint32 timestamp);
extern void gdk_app_launch_context_set_icon (GdkAppLaunchContext *context,GIcon *icon);
extern void gdk_app_launch_context_set_icon_name (GdkAppLaunchContext *context,const char *icon_name);
extern GType gdk_color_get_type (void);
extern GdkColor *gdk_color_copy (const GdkColor *color);
extern void gdk_color_free (GdkColor *color);
extern guint gdk_color_hash (const GdkColor *color);
extern gboolean gdk_color_equal (const GdkColor *colora,const GdkColor *colorb);
extern gboolean gdk_color_parse (const gchar *spec,GdkColor *color);
extern gchar * gdk_color_to_string (const GdkColor *color);
extern GType gdk_rgba_get_type (void);
extern GdkRGBA * gdk_rgba_copy (const GdkRGBA *rgba);
extern void gdk_rgba_free (GdkRGBA *rgba);
extern guint gdk_rgba_hash (gconstpointer p);
extern gboolean gdk_rgba_equal (gconstpointer p1,gconstpointer p2);
extern gboolean gdk_rgba_parse (GdkRGBA *rgba,const gchar *spec);
extern gchar * gdk_rgba_to_string (const GdkRGBA *rgba);
extern GType pango_cairo_font_map_get_type (void);
extern PangoFontMap *pango_cairo_font_map_new (void);
extern PangoFontMap *pango_cairo_font_map_new_for_font_type (cairo_font_type_t fonttype);
extern PangoFontMap *pango_cairo_font_map_get_default (void);
extern void pango_cairo_font_map_set_default (PangoCairoFontMap *fontmap);
extern cairo_font_type_t pango_cairo_font_map_get_font_type (PangoCairoFontMap *fontmap);
extern void pango_cairo_font_map_set_resolution (PangoCairoFontMap *fontmap,double dpi);
extern double pango_cairo_font_map_get_resolution (PangoCairoFontMap *fontmap);
extern PangoContext *pango_cairo_font_map_create_context (PangoCairoFontMap *fontmap);
extern GType pango_cairo_font_get_type (void);
extern cairo_scaled_font_t *pango_cairo_font_get_scaled_font (PangoCairoFont *font);
extern void pango_cairo_update_context (cairo_t *cr,PangoContext *context);
extern void pango_cairo_context_set_font_options (PangoContext *context,const cairo_font_options_t *options);
extern const cairo_font_options_t *pango_cairo_context_get_font_options (PangoContext *context);
extern void pango_cairo_context_set_resolution (PangoContext *context,double dpi);
extern double pango_cairo_context_get_resolution (PangoContext *context);
extern void pango_cairo_context_set_shape_renderer (PangoContext *context,PangoCairoShapeRendererFunc func,gpointer data,GDestroyNotify dnotify);
extern PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer (PangoContext *context,gpointer *data);
extern PangoContext *pango_cairo_create_context (cairo_t *cr);
extern PangoLayout *pango_cairo_create_layout (cairo_t *cr);
extern void pango_cairo_update_layout (cairo_t *cr,PangoLayout *layout);
extern void pango_cairo_show_glyph_string (cairo_t *cr,PangoFont *font,PangoGlyphString *glyphs);
extern void pango_cairo_show_glyph_item (cairo_t *cr,const char *text,PangoGlyphItem *glyph_item);
extern void pango_cairo_show_layout_line (cairo_t *cr,PangoLayoutLine *line);
extern void pango_cairo_show_layout (cairo_t *cr,PangoLayout *layout);
extern void pango_cairo_show_error_underline (cairo_t *cr,double x,double y,double width,double height);
extern void pango_cairo_glyph_string_path (cairo_t *cr,PangoFont *font,PangoGlyphString *glyphs);
extern void pango_cairo_layout_line_path (cairo_t *cr,PangoLayoutLine *line);
extern void pango_cairo_layout_path (cairo_t *cr,PangoLayout *layout);
extern void pango_cairo_error_underline_path (cairo_t *cr,double x,double y,double width,double height);
extern cairo_t * gdk_cairo_create (GdkWindow *window);
extern gboolean gdk_cairo_get_clip_rectangle (cairo_t *cr,GdkRectangle *rect);
extern void gdk_cairo_set_source_rgba (cairo_t *cr,const GdkRGBA *rgba);
extern void gdk_cairo_set_source_pixbuf (cairo_t *cr,const GdkPixbuf *pixbuf,gdouble pixbuf_x,gdouble pixbuf_y);
extern void gdk_cairo_set_source_window (cairo_t *cr,GdkWindow *window,gdouble x,gdouble y);
extern void gdk_cairo_rectangle (cairo_t *cr,const GdkRectangle *rectangle);
extern void gdk_cairo_region (cairo_t *cr,const cairo_region_t *region);
extern cairo_region_t *gdk_cairo_region_create_from_surface(cairo_surface_t *surface);
extern void gdk_cairo_set_source_color (cairo_t *cr,const GdkColor *color);
extern cairo_surface_t * gdk_cairo_surface_create_from_pixbuf (const GdkPixbuf *pixbuf,int scale,GdkWindow *for_window);
extern void gdk_cairo_draw_from_gl (cairo_t *cr,GdkWindow *window,int source,int source_type,int buffer_scale,int x,int y,int width,int height);
extern GdkDrawingContext * gdk_cairo_get_drawing_context (cairo_t *cr);
extern GType gdk_cursor_get_type (void);
extern GdkCursor* gdk_cursor_new_for_display (GdkDisplay *display,GdkCursorType cursor_type);
extern GdkCursor* gdk_cursor_new (GdkCursorType cursor_type);
extern GdkCursor* gdk_cursor_new_from_pixbuf (GdkDisplay *display,GdkPixbuf *pixbuf,gint x,gint y);
extern GdkCursor* gdk_cursor_new_from_surface (GdkDisplay *display,cairo_surface_t *surface,gdouble x,gdouble y);
extern GdkCursor* gdk_cursor_new_from_name (GdkDisplay *display,const gchar *name);
extern GdkDisplay* gdk_cursor_get_display (GdkCursor *cursor);
extern GdkCursor * gdk_cursor_ref (GdkCursor *cursor);
extern void gdk_cursor_unref (GdkCursor *cursor);
extern GdkPixbuf* gdk_cursor_get_image (GdkCursor *cursor);
extern cairo_surface_t *gdk_cursor_get_surface (GdkCursor *cursor,gdouble *x_hot,gdouble *y_hot);
extern GdkCursorType gdk_cursor_get_cursor_type (GdkCursor *cursor);
extern GType gdk_device_pad_get_type (void);
extern gint gdk_device_pad_get_n_groups (GdkDevicePad *pad);
extern gint gdk_device_pad_get_group_n_modes (GdkDevicePad *pad,gint group_idx);
extern gint gdk_device_pad_get_n_features (GdkDevicePad *pad,GdkDevicePadFeature feature);
extern gint gdk_device_pad_get_feature_group (GdkDevicePad *pad,GdkDevicePadFeature feature,gint feature_idx);
extern GType gdk_display_manager_get_type (void);
extern GdkDisplayManager *gdk_display_manager_get (void);
extern GdkDisplay * gdk_display_manager_get_default_display (GdkDisplayManager *manager);
extern void gdk_display_manager_set_default_display (GdkDisplayManager *manager,GdkDisplay *display);
extern GSList * gdk_display_manager_list_displays (GdkDisplayManager *manager);
extern GdkDisplay * gdk_display_manager_open_display (GdkDisplayManager *manager,const gchar *name);
extern GType gdk_cursor_type_get_type (void);
extern GType gdk_input_source_get_type (void);
extern GType gdk_input_mode_get_type (void);
extern GType gdk_device_type_get_type (void);
extern GType gdk_device_pad_feature_get_type (void);
extern GType gdk_device_tool_type_get_type (void);
extern GType gdk_drag_action_get_type (void);
extern GType gdk_drag_cancel_reason_get_type (void);
extern GType gdk_drag_protocol_get_type (void);
extern GType gdk_filter_return_get_type (void);
extern GType gdk_event_type_get_type (void);
extern GType gdk_visibility_state_get_type (void);
extern GType gdk_touchpad_gesture_phase_get_type (void);
extern GType gdk_scroll_direction_get_type (void);
extern GType gdk_notify_type_get_type (void);
extern GType gdk_crossing_mode_get_type (void);
extern GType gdk_property_state_get_type (void);
extern GType gdk_window_state_get_type (void);
extern GType gdk_setting_action_get_type (void);
extern GType gdk_owner_change_get_type (void);
extern GType gdk_frame_clock_phase_get_type (void);
extern GType gdk_subpixel_layout_get_type (void);
extern GType gdk_prop_mode_get_type (void);
extern GType gdk_seat_capabilities_get_type (void);
extern GType gdk_byte_order_get_type (void);
extern GType gdk_modifier_type_get_type (void);
extern GType gdk_modifier_intent_get_type (void);
extern GType gdk_status_get_type (void);
extern GType gdk_grab_status_get_type (void);
extern GType gdk_grab_ownership_get_type (void);
extern GType gdk_event_mask_get_type (void);
extern GType gdk_gl_error_get_type (void);
extern GType gdk_window_type_hint_get_type (void);
extern GType gdk_axis_use_get_type (void);
extern GType gdk_axis_flags_get_type (void);
extern GType gdk_visual_type_get_type (void);
extern GType gdk_window_window_class_get_type (void);
extern GType gdk_window_type_get_type (void);
extern GType gdk_window_attributes_type_get_type (void);
extern GType gdk_window_hints_get_type (void);
extern GType gdk_wm_decoration_get_type (void);
extern GType gdk_wm_function_get_type (void);
extern GType gdk_gravity_get_type (void);
extern GType gdk_anchor_hints_get_type (void);
extern GType gdk_window_edge_get_type (void);
extern GType gdk_fullscreen_mode_get_type (void);
extern GQuark gdk_gl_error_quark (void);
extern GType gdk_gl_context_get_type (void);
extern GdkDisplay * gdk_gl_context_get_display (GdkGLContext *context);
extern GdkWindow * gdk_gl_context_get_window (GdkGLContext *context);
extern GdkGLContext * gdk_gl_context_get_shared_context (GdkGLContext *context);
extern void gdk_gl_context_get_version (GdkGLContext *context,int *major,int *minor);
extern gboolean gdk_gl_context_is_legacy (GdkGLContext *context);
extern void gdk_gl_context_set_required_version (GdkGLContext *context,int major,int minor);
extern void gdk_gl_context_get_required_version (GdkGLContext *context,int *major,int *minor);
extern void gdk_gl_context_set_debug_enabled (GdkGLContext *context,gboolean enabled);
extern gboolean gdk_gl_context_get_debug_enabled (GdkGLContext *context);
extern void gdk_gl_context_set_forward_compatible (GdkGLContext *context,gboolean compatible);
extern gboolean gdk_gl_context_get_forward_compatible (GdkGLContext *context);
extern void gdk_gl_context_set_use_es (GdkGLContext *context,int use_es);
extern gboolean gdk_gl_context_get_use_es (GdkGLContext *context);
extern gboolean gdk_gl_context_realize (GdkGLContext *context,GError **error);
extern void gdk_gl_context_make_current (GdkGLContext *context);
extern GdkGLContext * gdk_gl_context_get_current (void);
extern void gdk_gl_context_clear_current (void);
extern GType gdk_keymap_get_type (void);
extern GdkKeymap* gdk_keymap_get_default (void);
extern GdkKeymap* gdk_keymap_get_for_display (GdkDisplay *display);
extern guint gdk_keymap_lookup_key (GdkKeymap *keymap,const GdkKeymapKey *key);
extern gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap,guint hardware_keycode,GdkModifierType state,gint group,guint *keyval,gint *effective_group,gint *level,GdkModifierType *consumed_modifiers);
extern gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap,guint keyval,GdkKeymapKey **keys,gint *n_keys);
extern gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap,guint hardware_keycode,GdkKeymapKey **keys,guint **keyvals,gint *n_entries);
extern PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);
extern gboolean gdk_keymap_have_bidi_layouts (GdkKeymap *keymap);
extern gboolean gdk_keymap_get_caps_lock_state (GdkKeymap *keymap);
extern gboolean gdk_keymap_get_num_lock_state (GdkKeymap *keymap);
extern gboolean gdk_keymap_get_scroll_lock_state (GdkKeymap *keymap);
extern guint gdk_keymap_get_modifier_state (GdkKeymap *keymap);
extern void gdk_keymap_add_virtual_modifiers (GdkKeymap *keymap,GdkModifierType *state);
extern gboolean gdk_keymap_map_virtual_modifiers (GdkKeymap *keymap,GdkModifierType *state);
extern GdkModifierType gdk_keymap_get_modifier_mask (GdkKeymap *keymap,GdkModifierIntent intent);
extern gchar* gdk_keyval_name (guint keyval);
extern guint gdk_keyval_from_name (const gchar *keyval_name);
extern void gdk_keyval_convert_case (guint symbol,guint *lower,guint *upper);
extern guint gdk_keyval_to_upper (guint keyval);
extern guint gdk_keyval_to_lower (guint keyval);
extern gboolean gdk_keyval_is_upper (guint keyval);
extern gboolean gdk_keyval_is_lower (guint keyval);
extern guint32 gdk_keyval_to_unicode (guint keyval);
extern guint gdk_unicode_to_keyval (guint32 wc);
extern void gdk_parse_args (gint *argc,gchar ***argv);
extern void gdk_init (gint *argc,gchar ***argv);
extern gboolean gdk_init_check (gint *argc,gchar ***argv);
extern void gdk_add_option_entries_libgtk_only (GOptionGroup *group);
extern void gdk_pre_parse_libgtk_only (void);
extern const gchar * gdk_get_program_class (void);
extern void gdk_set_program_class (const gchar *program_class);
extern void gdk_notify_startup_complete (void);
extern void gdk_notify_startup_complete_with_id (const gchar* startup_id);
extern void gdk_error_trap_push (void);
extern  gint gdk_error_trap_pop (void);
extern void gdk_error_trap_pop_ignored (void);
extern const gchar * gdk_get_display_arg_name (void);
extern gchar* gdk_get_display (void);
extern GdkGrabStatus gdk_pointer_grab (GdkWindow *window,gboolean owner_events,GdkEventMask event_mask,GdkWindow *confine_to,GdkCursor *cursor,guint32 time_);
extern GdkGrabStatus gdk_keyboard_grab (GdkWindow *window,gboolean owner_events,guint32 time_);
extern void gdk_pointer_ungrab (guint32 time_);
extern void gdk_keyboard_ungrab (guint32 time_);
extern gboolean gdk_pointer_is_grabbed (void);
extern gint gdk_screen_width (void);
extern gint gdk_screen_height (void);
extern gint gdk_screen_width_mm (void);
extern gint gdk_screen_height_mm (void);
extern void gdk_set_double_click_time (guint msec);
extern void gdk_beep (void);
extern void gdk_flush (void);
extern void gdk_disable_multidevice (void);
extern void gdk_set_allowed_backends (const gchar *backends);
extern PangoContext *gdk_pango_context_get_for_screen (GdkScreen *screen);
extern PangoContext *gdk_pango_context_get_for_display (GdkDisplay *display);
extern PangoContext *gdk_pango_context_get (void);
extern cairo_region_t *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line,gint x_origin,gint y_origin,const gint *index_ranges,gint n_ranges);
extern cairo_region_t *gdk_pango_layout_get_clip_region (PangoLayout *layout,gint x_origin,gint y_origin,const gint *index_ranges,gint n_ranges);
extern GdkAtom gdk_atom_intern (const gchar *atom_name,gboolean only_if_exists);
extern GdkAtom gdk_atom_intern_static_string (const gchar *atom_name);
extern gchar* gdk_atom_name (GdkAtom atom);
extern gboolean gdk_property_get (GdkWindow *window,GdkAtom property,GdkAtom type,gulong offset,gulong length,gint pdelete,GdkAtom *actual_property_type,gint *actual_format,gint *actual_length,guchar **data);
extern void gdk_property_change (GdkWindow *window,GdkAtom property,GdkAtom type,gint format,GdkPropMode mode,const guchar *data,gint nelements);
extern void gdk_property_delete (GdkWindow *window,GdkAtom property);
extern gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display,GdkAtom encoding,gint format,const guchar *text,gint length,gchar ***list);
extern gchar *gdk_utf8_to_string_target (const gchar *str);
extern gboolean gdk_selection_owner_set (GdkWindow *owner,GdkAtom selection,guint32 time_,gboolean send_event);
extern GdkWindow* gdk_selection_owner_get (GdkAtom selection);
extern gboolean gdk_selection_owner_set_for_display (GdkDisplay *display,GdkWindow *owner,GdkAtom selection,guint32 time_,gboolean send_event);
extern GdkWindow *gdk_selection_owner_get_for_display (GdkDisplay *display,GdkAtom selection);
extern void gdk_selection_convert (GdkWindow *requestor,GdkAtom selection,GdkAtom target,guint32 time_);
extern gint gdk_selection_property_get (GdkWindow *requestor,guchar **data,GdkAtom *prop_type,gint *prop_format);
extern void gdk_selection_send_notify (GdkWindow *requestor,GdkAtom selection,GdkAtom target,GdkAtom property,guint32 time_);
extern void gdk_selection_send_notify_for_display (GdkDisplay *display,GdkWindow *requestor,GdkAtom selection,GdkAtom target,GdkAtom property,guint32 time_);
extern void gdk_test_render_sync (GdkWindow *window);
extern gboolean gdk_test_simulate_key (GdkWindow *window,gint x,gint y,guint keyval,GdkModifierType modifiers,GdkEventType key_pressrelease);
extern gboolean gdk_test_simulate_button (GdkWindow *window,gint x,gint y,guint button,GdkModifierType modifiers,GdkEventType button_pressrelease);
extern void gdk_threads_init (void);
extern void gdk_threads_enter (void);
extern void gdk_threads_leave (void);
extern void gdk_threads_set_lock_functions (GCallback enter_fn,GCallback leave_fn);
extern guint gdk_threads_add_idle_full (gint priority,GSourceFunc function,gpointer data,GDestroyNotify notify);
extern guint gdk_threads_add_idle (GSourceFunc function,gpointer data);
extern guint gdk_threads_add_timeout_full (gint priority,guint interval,GSourceFunc function,gpointer data,GDestroyNotify notify);
extern guint gdk_threads_add_timeout (guint interval,GSourceFunc function,gpointer data);
extern guint gdk_threads_add_timeout_seconds_full (gint priority,guint interval,GSourceFunc function,gpointer data,GDestroyNotify notify);
extern guint gdk_threads_add_timeout_seconds (guint interval,GSourceFunc function,gpointer data);
extern GType gdk_visual_get_type (void);
extern gint gdk_visual_get_best_depth (void);
extern GdkVisualType gdk_visual_get_best_type (void);
extern GdkVisual* gdk_visual_get_system (void);
extern GdkVisual* gdk_visual_get_best (void);
extern GdkVisual* gdk_visual_get_best_with_depth (gint depth);
extern GdkVisual* gdk_visual_get_best_with_type (GdkVisualType visual_type);
extern GdkVisual* gdk_visual_get_best_with_both (gint depth,GdkVisualType visual_type);
extern void gdk_query_depths (gint **depths,gint *count);
extern void gdk_query_visual_types (GdkVisualType **visual_types,gint *count);
extern GList* gdk_list_visuals (void);
extern GdkScreen *gdk_visual_get_screen (GdkVisual *visual);
extern GdkVisualType gdk_visual_get_visual_type (GdkVisual *visual);
extern gint gdk_visual_get_depth (GdkVisual *visual);
extern GdkByteOrder gdk_visual_get_byte_order (GdkVisual *visual);
extern gint gdk_visual_get_colormap_size (GdkVisual *visual);
extern gint gdk_visual_get_bits_per_rgb (GdkVisual *visual);
extern void gdk_visual_get_red_pixel_details (GdkVisual *visual,guint32 *mask,gint *shift,gint *precision);
extern void gdk_visual_get_green_pixel_details (GdkVisual *visual,guint32 *mask,gint *shift,gint *precision);
extern void gdk_visual_get_blue_pixel_details (GdkVisual *visual,guint32 *mask,gint *shift,gint *precision);