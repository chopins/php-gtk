extern const guint gdk_pixbuf_major_version;
extern const guint gdk_pixbuf_minor_version;
extern const guint gdk_pixbuf_micro_version;
extern const char *gdk_pixbuf_version;
extern GQuark gdk_pixbuf_error_quark(void);
extern GType gdk_pixbuf_get_type(void);
extern GdkPixbuf *gdk_pixbuf_ref(GdkPixbuf *pixbuf);
extern void gdk_pixbuf_unref(GdkPixbuf *pixbuf);
extern GdkColorspace gdk_pixbuf_get_colorspace(const GdkPixbuf *pixbuf);
extern int gdk_pixbuf_get_n_channels(const GdkPixbuf *pixbuf);
extern gboolean gdk_pixbuf_get_has_alpha(const GdkPixbuf *pixbuf);
extern int gdk_pixbuf_get_bits_per_sample(const GdkPixbuf *pixbuf);
extern guchar *gdk_pixbuf_get_pixels(const GdkPixbuf *pixbuf);
extern int gdk_pixbuf_get_width(const GdkPixbuf *pixbuf);
extern int gdk_pixbuf_get_height(const GdkPixbuf *pixbuf);
extern int gdk_pixbuf_get_rowstride(const GdkPixbuf *pixbuf);
extern gsize gdk_pixbuf_get_byte_length(const GdkPixbuf *pixbuf);
extern guchar *gdk_pixbuf_get_pixels_with_length(const GdkPixbuf *pixbuf, guint *length);
extern const guint8* gdk_pixbuf_read_pixels(const GdkPixbuf *pixbuf);
extern GBytes * gdk_pixbuf_read_pixel_bytes(const GdkPixbuf *pixbuf);
extern GdkPixbuf *gdk_pixbuf_new(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height);
extern gint gdk_pixbuf_calculate_rowstride(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height);
extern GdkPixbuf *gdk_pixbuf_copy(const GdkPixbuf *pixbuf);
extern GdkPixbuf *gdk_pixbuf_new_subpixbuf(GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height);
extern GdkPixbuf *gdk_pixbuf_new_from_file(const char *filename, GError **error);
extern GdkPixbuf *gdk_pixbuf_new_from_file_at_size(const char *filename, int width, int height, GError **error);
extern GdkPixbuf *gdk_pixbuf_new_from_file_at_scale(const char *filename, int width, int height, gboolean preserve_aspect_ratio, GError **error);
extern GdkPixbuf *gdk_pixbuf_new_from_resource(const char *resource_path, GError **error);
extern GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale(const char *resource_path, int width, int height, gboolean preserve_aspect_ratio, GError **error);
extern GdkPixbuf *gdk_pixbuf_new_from_data(const guchar *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride, GdkPixbufDestroyNotify destroy_fn, gpointer destroy_fn_data);
extern GdkPixbuf *gdk_pixbuf_new_from_bytes(GBytes *data, GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height, int rowstride);
extern GdkPixbuf *gdk_pixbuf_new_from_xpm_data(const char **data);
extern GdkPixbuf* gdk_pixbuf_new_from_inline(gint data_length, const guint8 *data, gboolean copy_pixels, GError **error);
extern void gdk_pixbuf_fill(GdkPixbuf *pixbuf, guint32 pixel);
extern gboolean gdk_pixbuf_save(GdkPixbuf *pixbuf, const char *filename, const char *type, GError **error, ...);
extern gboolean gdk_pixbuf_savev(GdkPixbuf *pixbuf, const char *filename, const char *type, char **option_keys, char **option_values, GError **error);
extern gboolean gdk_pixbuf_save_to_callback(GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, GError **error, ...);
extern gboolean gdk_pixbuf_save_to_callbackv(GdkPixbuf *pixbuf, GdkPixbufSaveFunc save_func, gpointer user_data, const char *type, char **option_keys, char **option_values, GError **error);
extern gboolean gdk_pixbuf_save_to_buffer(GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, GError **error, ...);
extern gboolean gdk_pixbuf_save_to_bufferv(GdkPixbuf *pixbuf, gchar **buffer, gsize *buffer_size, const char *type, char **option_keys, char **option_values, GError **error);
extern GdkPixbuf *gdk_pixbuf_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error);
extern void gdk_pixbuf_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
extern GdkPixbuf *gdk_pixbuf_new_from_stream_finish(GAsyncResult *async_result, GError **error);
extern GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GError **error);
extern void gdk_pixbuf_new_from_stream_at_scale_async(GInputStream *stream, gint width, gint height, gboolean preserve_aspect_ratio, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
extern gboolean gdk_pixbuf_save_to_stream(GdkPixbuf *pixbuf, GOutputStream *stream, const char *type, GCancellable *cancellable, GError **error, ...);
extern void gdk_pixbuf_save_to_stream_async(GdkPixbuf *pixbuf, GOutputStream *stream, const gchar *type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data, ...);
extern gboolean gdk_pixbuf_save_to_stream_finish(GAsyncResult *async_result, GError **error);
extern void gdk_pixbuf_save_to_streamv_async(GdkPixbuf *pixbuf, GOutputStream *stream, const gchar *type, gchar **option_keys, gchar **option_values, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
extern gboolean gdk_pixbuf_save_to_streamv(GdkPixbuf *pixbuf, GOutputStream *stream, const char *type, char **option_keys, char **option_values, GCancellable *cancellable, GError **error);
extern GdkPixbuf *gdk_pixbuf_add_alpha(const GdkPixbuf *pixbuf, gboolean substitute_color, guchar r, guchar g, guchar b);
extern void gdk_pixbuf_copy_area(const GdkPixbuf *src_pixbuf, int src_x, int src_y, int width, int height, GdkPixbuf *dest_pixbuf, int dest_x, int dest_y);
extern void gdk_pixbuf_saturate_and_pixelate(const GdkPixbuf *src, GdkPixbuf *dest, gfloat saturation, gboolean pixelate);
extern GdkPixbuf *gdk_pixbuf_apply_embedded_orientation(GdkPixbuf *src);
extern gboolean gdk_pixbuf_set_option(GdkPixbuf *pixbuf, const gchar *key, const gchar *value);
extern const gchar * gdk_pixbuf_get_option(GdkPixbuf *pixbuf, const gchar *key);
extern gboolean gdk_pixbuf_remove_option(GdkPixbuf *pixbuf, const gchar *key);
extern GHashTable * gdk_pixbuf_get_options(GdkPixbuf *pixbuf);
extern gboolean gdk_pixbuf_copy_options(GdkPixbuf *src_pixbuf, GdkPixbuf *dest_pixbuf);
extern void gdk_pixbuf_scale(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type);
extern void gdk_pixbuf_composite(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha);
extern void gdk_pixbuf_composite_color(const GdkPixbuf *src, GdkPixbuf *dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, GdkInterpType interp_type, int overall_alpha, int check_x, int check_y, int check_size, guint32 color1, guint32 color2);
extern GdkPixbuf *gdk_pixbuf_scale_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type);
extern GdkPixbuf *gdk_pixbuf_composite_color_simple(const GdkPixbuf *src, int dest_width, int dest_height, GdkInterpType interp_type, int overall_alpha, int check_size, guint32 color1, guint32 color2);
extern GdkPixbuf *gdk_pixbuf_rotate_simple(const GdkPixbuf *src, GdkPixbufRotation angle);
extern GdkPixbuf *gdk_pixbuf_flip(const GdkPixbuf *src, gboolean horizontal);
extern GType gdk_pixbuf_animation_get_type(void);
extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file(const char *filename, GError **error);
extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream(GInputStream *stream, GCancellable *cancellable, GError **error);
extern void gdk_pixbuf_animation_new_from_stream_async(GInputStream *stream, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish(GAsyncResult*async_result, GError **error);
extern GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path, GError **error);
extern GdkPixbufAnimation *gdk_pixbuf_animation_ref(GdkPixbufAnimation *animation);
extern void gdk_pixbuf_animation_unref(GdkPixbufAnimation *animation);
extern int gdk_pixbuf_animation_get_width(GdkPixbufAnimation *animation);
extern int gdk_pixbuf_animation_get_height(GdkPixbufAnimation *animation);
extern gboolean gdk_pixbuf_animation_is_static_image(GdkPixbufAnimation *animation);
extern GdkPixbuf *gdk_pixbuf_animation_get_static_image(GdkPixbufAnimation *animation);
extern GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter(GdkPixbufAnimation *animation, const GTimeVal *start_time);
extern GType gdk_pixbuf_animation_iter_get_type(void);
extern int gdk_pixbuf_animation_iter_get_delay_time(GdkPixbufAnimationIter *iter);
extern GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf(GdkPixbufAnimationIter *iter);
extern gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame(GdkPixbufAnimationIter *iter);
extern gboolean gdk_pixbuf_animation_iter_advance(GdkPixbufAnimationIter *iter, const GTimeVal *current_time);
extern GType gdk_pixbuf_simple_anim_get_type(void);
extern GType gdk_pixbuf_simple_anim_iter_get_type(void);
extern GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new(gint width, gint height, gfloat rate);
extern void gdk_pixbuf_simple_anim_add_frame(GdkPixbufSimpleAnim *animation, GdkPixbuf *pixbuf);
extern void gdk_pixbuf_simple_anim_set_loop(GdkPixbufSimpleAnim *animation, gboolean loop);
extern gboolean gdk_pixbuf_simple_anim_get_loop(GdkPixbufSimpleAnim *animation);
extern gboolean gdk_pixbuf_init_modules(const char *path, GError **error);
extern GType gdk_pixbuf_format_get_type(void);
extern GSList *gdk_pixbuf_get_formats(void);
extern gchar *gdk_pixbuf_format_get_name(GdkPixbufFormat *format);
extern gchar *gdk_pixbuf_format_get_description(GdkPixbufFormat *format);
extern gchar **gdk_pixbuf_format_get_mime_types(GdkPixbufFormat *format);
extern gchar **gdk_pixbuf_format_get_extensions(GdkPixbufFormat *format);
extern gboolean gdk_pixbuf_format_is_save_option_supported(GdkPixbufFormat *format, const gchar *option_key);
extern gboolean gdk_pixbuf_format_is_writable(GdkPixbufFormat *format);
extern gboolean gdk_pixbuf_format_is_scalable(GdkPixbufFormat *format);
extern gboolean gdk_pixbuf_format_is_disabled(GdkPixbufFormat *format);
extern void gdk_pixbuf_format_set_disabled(GdkPixbufFormat *format, gboolean disabled);
extern gchar *gdk_pixbuf_format_get_license(GdkPixbufFormat *format);
extern GdkPixbufFormat *gdk_pixbuf_get_file_info(const gchar *filename, gint *width, gint *height);
extern void gdk_pixbuf_get_file_info_async(const gchar *filename, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
extern GdkPixbufFormat *gdk_pixbuf_get_file_info_finish(GAsyncResult *async_result, gint *width, gint *height, GError **error);
extern GdkPixbufFormat *gdk_pixbuf_format_copy(const GdkPixbufFormat *format);
extern void gdk_pixbuf_format_free(GdkPixbufFormat *format);
extern GType gdk_pixbuf_loader_get_type(void);
extern GdkPixbufLoader * gdk_pixbuf_loader_new(void);
extern GdkPixbufLoader * gdk_pixbuf_loader_new_with_type(const char *image_type, GError **error);
extern GdkPixbufLoader * gdk_pixbuf_loader_new_with_mime_type(const char *mime_type, GError **error);
extern void gdk_pixbuf_loader_set_size(GdkPixbufLoader *loader, int width, int height);
extern gboolean gdk_pixbuf_loader_write(GdkPixbufLoader *loader, const guchar *buf, gsize count, GError **error);
extern gboolean gdk_pixbuf_loader_write_bytes(GdkPixbufLoader *loader, GBytes *buffer, GError **error);
extern GdkPixbuf * gdk_pixbuf_loader_get_pixbuf(GdkPixbufLoader *loader);
extern GdkPixbufAnimation * gdk_pixbuf_loader_get_animation(GdkPixbufLoader *loader);
extern gboolean gdk_pixbuf_loader_close(GdkPixbufLoader *loader, GError **error);
extern GdkPixbufFormat *gdk_pixbuf_loader_get_format(GdkPixbufLoader *loader);
extern GType gdk_pixbuf_alpha_mode_get_type(void);
extern GType gdk_colorspace_get_type(void);
extern GType gdk_pixbuf_error_get_type(void);
extern GType gdk_interp_type_get_type(void);
extern GType gdk_pixbuf_rotation_get_type(void);
